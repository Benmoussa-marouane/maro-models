{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"T LSTM","version":"0.3.2","provenance":[],"collapsed_sections":[],"machine_shape":"hm"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"k9mwe6Aw39dY","colab_type":"code","outputId":"d4732090-3b2b-4a79-95e0-c6a27a2343bf","executionInfo":{"status":"ok","timestamp":1565271631359,"user_tz":-120,"elapsed":1328,"user":{"displayName":"MAROUANE BENMOUSSA","photoUrl":"https://lh5.googleusercontent.com/-KY-Hy5XrhUc/AAAAAAAAAAI/AAAAAAAAAMc/cB7gRWszZHo/s64/photo.jpg","userId":"04874485933254618584"}},"colab":{"base_uri":"https://localhost:8080/","height":33}},"source":["import tensorflow as tf\n","import numpy as np\n","import scipy.io as sio\n","from sklearn.metrics import accuracy_score\n","from sklearn.metrics import roc_auc_score\n","from sklearn.utils import shuffle\n","import sys\n","import math\n","# import cPickle\n","\n","import pandas as pd\n","\n","# importing copy module \n","import copy \n","import math\n","\n","from keras.models import Sequential\n","from keras.layers import Dense, Dropout\n","from keras.layers import LSTM\n","from keras import metrics\n","from keras.callbacks import TensorBoard\n","\n","\n","from keras.wrappers.scikit_learn import KerasClassifier\n","from sklearn.preprocessing import MinMaxScaler #, StandardScaler\n","from sklearn.metrics import mean_squared_error, mean_absolute_error\n","import time\n","import sys\n","\n","import warnings\n","warnings.filterwarnings(\"ignore\")\n","import matplotlib.pyplot as plt\n","\n","# !pip install hyperas\n","\n","from keras.callbacks import Callback\n","\n","print(tf.__version__)\n"],"execution_count":4,"outputs":[{"output_type":"stream","text":["1.14.0\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"ZIDAy9GLPnC9","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":33},"outputId":"20694f34-e01e-4914-8cea-c02291021623","executionInfo":{"status":"ok","timestamp":1565271631760,"user_tz":-120,"elapsed":1713,"user":{"displayName":"MAROUANE BENMOUSSA","photoUrl":"https://lh5.googleusercontent.com/-KY-Hy5XrhUc/AAAAAAAAAAI/AAAAAAAAAMc/cB7gRWszZHo/s64/photo.jpg","userId":"04874485933254618584"}}},"source":["\n","from google.colab import drive\n","drive.mount('/content/drive')\n"],"execution_count":5,"outputs":[{"output_type":"stream","text":["Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"B1t-DSPM5krK","colab_type":"code","colab":{}},"source":["# !ls /content/drive/My\\ Drive/Colab\\ Notebooks/*.py"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"1am819Et5ktX","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"outputId":"c156d0b8-01f1-44c1-b973-faff7dab73bd","executionInfo":{"status":"ok","timestamp":1565271636329,"user_tz":-120,"elapsed":6268,"user":{"displayName":"MAROUANE BENMOUSSA","photoUrl":"https://lh5.googleusercontent.com/-KY-Hy5XrhUc/AAAAAAAAAAI/AAAAAAAAAMc/cB7gRWszZHo/s64/photo.jpg","userId":"04874485933254618584"}}},"source":["# !cat '/content/drive/My Drive/Colab Notebooks/TLSTM.py'\n","\n","import sys\n","sys.path.append('/content/drive/My Drive/Colab Notebooks')\n","\n","from TLSTM import TLSTM\n","\n","!cat '/content/drive/My Drive/Colab Notebooks/TLSTM.py'\n"],"execution_count":7,"outputs":[{"output_type":"stream","text":["# Time-Aware LSTM\n","# Supervised task implementation\n","# Inci M. Baytas, 2017\n","import tensorflow as tf\n","\n","\n","class TLSTM(object):\n","    def init_weights(self, input_dim, output_dim, name, std=0.1, reg=None):\n","        return tf.get_variable(name,shape=[input_dim, output_dim],initializer=tf.random_normal_initializer(0.0, std),regularizer = reg)\n","\n","    def init_bias(self, output_dim, name):\n","        return tf.get_variable(name,shape=[output_dim],initializer=tf.constant_initializer(1.0))\n","\n","    def no_init_weights(self, input_dim, output_dim, name):\n","        return tf.get_variable(name,shape=[input_dim, output_dim])\n","\n","    def no_init_bias(self, output_dim, name):\n","        return tf.get_variable(name,shape=[output_dim])\n","\n","    def __init__(self, input_dim, output_dim, hidden_dim, fc_dim,train):\n","\n","        self.input_dim = input_dim\n","        self.hidden_dim = hidden_dim\n","\n","        # [batch size x seq length x input dim]\n","        self.input = tf.placeholder('float', shape=[None, None, self.input_dim])\n","        self.labels = tf.placeholder('float', shape=[None, output_dim])\n","        self.time = tf.placeholder('float', shape=[None, None])\n","        self.keep_prob = tf.placeholder(tf.float32)\n","\n","        if train == 1:\n","\n","\n","            self.Wi = self.init_weights(self.input_dim, self.hidden_dim, name='Input_Hidden_weight',reg=None)\n","            self.Ui = self.init_weights(self.hidden_dim, self.hidden_dim, name='Input_State_weight',reg=None)\n","            self.bi = self.init_bias(self.hidden_dim, name='Input_Hidden_bias')\n","\n","            self.Wf = self.init_weights(self.input_dim, self.hidden_dim, name='Forget_Hidden_weight',reg=None)\n","            self.Uf = self.init_weights(self.hidden_dim, self.hidden_dim, name='Forget_State_weight',reg=None)\n","            self.bf = self.init_bias(self.hidden_dim, name='Forget_Hidden_bias')\n","\n","            self.Wog = self.init_weights(self.input_dim, self.hidden_dim, name='Output_Hidden_weight',reg=None)\n","            self.Uog = self.init_weights(self.hidden_dim, self.hidden_dim, name='Output_State_weight',reg=None)\n","            self.bog = self.init_bias(self.hidden_dim, name='Output_Hidden_bias')\n","\n","            self.Wc = self.init_weights(self.input_dim, self.hidden_dim, name='Cell_Hidden_weight',reg=None)\n","            self.Uc = self.init_weights(self.hidden_dim, self.hidden_dim, name='Cell_State_weight',reg=None)\n","            self.bc = self.init_bias(self.hidden_dim, name='Cell_Hidden_bias')\n","\n","            self.W_decomp = self.init_weights(self.hidden_dim, self.hidden_dim, name='Decomposition_Hidden_weight',reg=None)\n","            self.b_decomp = self.init_bias(self.hidden_dim, name='Decomposition_Hidden_bias_enc')\n","\n","            self.Wo = self.init_weights(self.hidden_dim, fc_dim, name='Fc_Layer_weight',reg=None)#tf.contrib.layers.l2_regularizer(scale=0.001)\n","            self.bo = self.init_bias(fc_dim, name='Fc_Layer_bias')\n","\n","            self.W_softmax = self.init_weights(fc_dim, output_dim, name='Output_Layer_weight',reg=None)#tf.contrib.layers.l2_regularizer(scale=0.001)\n","            self.b_softmax = self.init_bias(output_dim, name='Output_Layer_bias')\n","\n","        else:\n","\n","\n","            self.Wi = self.no_init_weights(self.input_dim, self.hidden_dim, name='Input_Hidden_weight')\n","            self.Ui = self.no_init_weights(self.hidden_dim, self.hidden_dim, name='Input_State_weight')\n","            self.bi = self.no_init_bias(self.hidden_dim, name='Input_Hidden_bias')\n","\n","            self.Wf = self.no_init_weights(self.input_dim, self.hidden_dim, name='Forget_Hidden_weight')\n","            self.Uf = self.no_init_weights(self.hidden_dim, self.hidden_dim, name='Forget_State_weight')\n","            self.bf = self.no_init_bias(self.hidden_dim, name='Forget_Hidden_bias')\n","\n","            self.Wog = self.no_init_weights(self.input_dim, self.hidden_dim, name='Output_Hidden_weight')\n","            self.Uog = self.no_init_weights(self.hidden_dim, self.hidden_dim, name='Output_State_weight')\n","            self.bog = self.no_init_bias(self.hidden_dim, name='Output_Hidden_bias')\n","\n","            self.Wc = self.no_init_weights(self.input_dim, self.hidden_dim, name='Cell_Hidden_weight')\n","            self.Uc = self.no_init_weights(self.hidden_dim, self.hidden_dim, name='Cell_State_weight')\n","            self.bc = self.no_init_bias(self.hidden_dim, name='Cell_Hidden_bias')\n","\n","            self.W_decomp = self.no_init_weights(self.hidden_dim, self.hidden_dim, name='Decomposition_Hidden_weight')\n","            self.b_decomp = self.no_init_bias(self.hidden_dim, name='Decomposition_Hidden_bias_enc')\n","\n","            self.Wo = self.no_init_weights(self.hidden_dim, fc_dim, name='Fc_Layer_weight')\n","            self.bo = self.no_init_bias(fc_dim, name='Fc_Layer_bias')\n","\n","            self.W_softmax = self.no_init_weights(fc_dim, output_dim, name='Output_Layer_weight')\n","            self.b_softmax = self.no_init_bias(output_dim, name='Output_Layer_bias')\n","\n","\n","\n","\n","\n","    def TLSTM_Unit(self, prev_hidden_memory, concat_input):\n","        prev_hidden_state, prev_cell = tf.unstack(prev_hidden_memory)\n","\n","        batch_size = tf.shape(concat_input)[0]\n","        x = tf.slice(concat_input, [0,1], [batch_size, self.input_dim])\n","        t = tf.slice(concat_input, [0,0], [batch_size,1])\n","\n","        # Dealing with time irregularity\n","\n","        # Map elapse time in days or months\n","        T = self.map_elapse_time(t)\n","\n","        # Decompose the previous cell if there is a elapse time\n","        C_ST = tf.nn.tanh(tf.matmul(prev_cell, self.W_decomp) + self.b_decomp)\n","        C_ST_dis = tf.multiply(T, C_ST)\n","        # if T is 0, then the weight is one\n","        prev_cell = prev_cell - C_ST + C_ST_dis\n","        \n","\n","        # Input gate\n","        i = tf.sigmoid(tf.matmul(x, self.Wi) + tf.matmul(prev_hidden_state, self.Ui) + self.bi)\n","\n","        # Forget Gate\n","        f = tf.sigmoid(tf.matmul(x, self.Wf) + tf.matmul(prev_hidden_state, self.Uf) + self.bf)\n","\n","\n","        # Output Gate\n","        o = tf.sigmoid(tf.matmul(x, self.Wog) + tf.matmul(prev_hidden_state, self.Uog) + self.bog)\n","\n","        # Candidate Memory Cell\n","        C = tf.nn.tanh(tf.matmul(x, self.Wc) + tf.matmul(prev_hidden_state, self.Uc) + self.bc)\n","\n","        # Current Memory cell\n","        Ct = f * prev_cell + i * C\n","\n","        # Current Hidden state\n","        current_hidden_state = o * tf.nn.tanh(Ct)\n","\n","        return tf.stack([current_hidden_state, Ct])\n","\n","    def get_states(self): # Returns all hidden states for the samples in a batch\n","        batch_size = tf.shape(self.input)[0]\n","        scan_input_ = tf.transpose(self.input, perm=[2, 0, 1])\n","        scan_input = tf.transpose(scan_input_) #scan input is [seq_length x batch_size x input_dim]\n","        scan_time = tf.transpose(self.time) # scan_time [seq_length x batch_size]\n","        initial_hidden = tf.zeros([batch_size, self.hidden_dim], tf.float32)\n","        ini_state_cell = tf.stack([initial_hidden, initial_hidden])\n","        # make scan_time [seq_length x batch_size x 1]\n","        scan_time = tf.reshape(scan_time, [tf.shape(scan_time)[0],tf.shape(scan_time)[1],1])\n","        concat_input = tf.concat([scan_time, scan_input],2) # [seq_length x batch_size x input_dim+1]\n","        packed_hidden_states = tf.scan(self.TLSTM_Unit, concat_input, initializer=ini_state_cell, name='states')\n","        all_states = packed_hidden_states[:, 0, :, :]\n","        return all_states\n","\n","\n","    def get_output(self, state):\n","        output = tf.nn.relu(tf.matmul(state, self.Wo) + self.bo)\n","        output = tf.nn.dropout(output, self.keep_prob)\n","        output = tf.matmul(output, self.W_softmax) + self.b_softmax\n","        return output\n","\n","    def get_outputs(self): # Returns all the outputs\n","        all_states = self.get_states()\n","        all_outputs = tf.map_fn(self.get_output, all_states)\n","        output = tf.reverse(all_outputs, [0])[0, :, :] # Compatible with tensorflow 1.2.1\n","        # output = tf.reverse(all_outputs, [True, False, False])[0, :, :] # Compatible with tensorflow 0.12.1\n","        return output\n","\n","    def get_cost_acc(self):\n","        \n","        logits = self.get_outputs()\n","        loss = tf.reduce_mean(tf.square(self.labels - logits))\n","        #cross_entropy= tf.losses.mean_squared_error(labels=self.labels ,predictions=logits )\n","        #cross_entropy = tf.reduce_mean(tf.nn.softmax_cross_entropy_with_logits(labels=self.labels, logits=logits))\n","        y_pred = tf.nn.softmax(logits, 1)\n","        y = tf.argmax(self.labels, 1)\n","        return loss, y_pred, y, logits, self.labels\n","\n","\n","    def map_elapse_time(self, t):\n","\n","        c1 = tf.constant(1, dtype=tf.float32)\n","        c2 = tf.constant(2.7183, dtype=tf.float32)\n","\n","        # T = tf.multiply(self.wt, t) + self.bt\n","\n","        T = tf.div(c1, tf.log(t + c2), name='Log_elapse_time')\n","\n","        Ones = tf.ones([1, self.hidden_dim], dtype=tf.float32)\n","\n","        T = tf.matmul(T, Ones)\n","\n","        return T\n","\n","\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"WlXMzgKh3sRu","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":196},"outputId":"32a83ed8-8997-49f4-ee61-c5d9a44eaed1","executionInfo":{"status":"ok","timestamp":1565271638618,"user_tz":-120,"elapsed":8553,"user":{"displayName":"MAROUANE BENMOUSSA","photoUrl":"https://lh5.googleusercontent.com/-KY-Hy5XrhUc/AAAAAAAAAAI/AAAAAAAAAMc/cB7gRWszZHo/s64/photo.jpg","userId":"04874485933254618584"}}},"source":["filename = '/content/drive/My Drive/Colab Notebooks/synthetic_w_elapsedTime.csv'\n","\n","df = pd.read_csv(filename)\n","\n","df.drop(df.columns[0],axis = 1,inplace=True)\n","\n","Dataset = df\n","\n","df.head()"],"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>signal</th>\n","      <th>distance</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>-1.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>-1.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1.0</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>-1.0</td>\n","      <td>1.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   signal  distance\n","0    -1.0       1.0\n","1     1.0       1.0\n","2    -1.0       1.0\n","3     1.0       1.0\n","4    -1.0       1.0"]},"metadata":{"tags":[]},"execution_count":8}]},{"cell_type":"code","metadata":{"id":"xLiLT1kL-As_","colab_type":"code","colab":{}},"source":["def get_non_null(df):\n","    lngth = min(list(len(col.dropna()) for ind, col in df.iteritems()))\n","    df = pd.concat(list(df.loc[:,col].dropna().head(lngth).reset_index(drop=True) for col in df),axis=1)\n","    return df\n","  \n","  \n","  \n","def encode(data, col, max_val):\n","    data[col + '_sin'] = np.sin(2 * np.pi * data[col]/max_val)\n","    data[col + '_cos'] = np.cos(2 * np.pi * data[col]/max_val)\n","    return data\n","  \n","  \n","\n","####################################################################\n","\n","# My package for preprocessing for training\n","  \n","####################################################################### \n","\n","def countcensor(dfx):\n","    '''\n","    function to identify and count values in dataframe columns that are censored (==0) or\n","    negative values. Asks to convert the values to the lowest positive, non-zero value in the \n","    column.\n","    Input = dataframe of raw data\n","    Output = dataframe of data cleaned of censored values or original data\n","    '''    \n","    names = list(dfx)\n","    censor_count = []\n","    dfx_length = len(dfx.columns)\n","    print(\"\\nCensored data in each feature:\")\n","    for i in range(dfx_length):\n","        censor_count.append((dfx.iloc[:,i]<=0.).sum())  ## count values and add to list\n","        print('{0:4s} {1:2d}'.format(names[i], censor_count[i]))\n","   \n","    try:\n","        censor_correct = input(\"Convert censored and negative data to lowest positive value? (Default = n)? \")\n","    except ValueError:\n","        censor_correct = \"y\"\n","        \n","    if censor_correct == \"y\":\n","        ##### if feature has censored data or negative data, replace it \n","        ##### with the smallest positive, non-zero value\n","        print(\"\\nFeature minimum positive values:\") ### for space\n","        \n","        for i in range(dfx_length):\n","            if censor_count[i]>0:\n","                xarray = np.asarray(dfx.iloc[:,i].sort_values())  #sort column and convert to array\n","                xmin = xarray[censor_count[i]+1] #select smallest, positive, non-zero value\n","                dfx.iloc[:,i][dfx.iloc[:,i]<= 0.] = xmin  ### replace censored values with min value\n","            else:\n","                xmin = 0.\n","            print('{0:4s} {1:3f}'.format(names[i], xmin))        \n","        print(\"\\nCensored and negative values converted to feature's smallest positive, non-zero value.\")\n","        \n","    else:\n","        print(\"\\nCensored and negative values not converted.\")\n"," \n","    return dfx\n","#################################################################\n","\n","\n","def checkoutliers(dfx):\n","    '''\n","    function to identify and count possible outliers in dataframe columns \n","    Input = dataframe of data\n","    Output = none\n","    ''' \n","    names = list(dfx)\n","    out_count = []\n","    dfx_length = len(dfx.columns)\n","    print(\"\\nPossible outliers in each feature:\")\n","    for i in range(dfx_length):\n","        dfx_test = 3*dfx.iloc[:,i].mean()  ##define test for outlier\n","        out_count.append((dfx.iloc[:,i]>dfx_test).sum())  ## count values and add to list\n","        #print(names[i])\n","        #print(out_count[i],'\\n')\n","    return\n","\n","def checknans(dfx):\n","    '''\n","    function to identify and count NaNs in dataframe columns \n","    Input = dataframe of data\n","    Output = none\n","    ''' \n","    names = list(dfx)\n","    nan_count = []\n","    dfx_length = len(dfx.columns)\n","    print(\"\\nNaN data in each feature:\")\n","    for i in range(dfx_length):\n","        nan_count.append(dfx.iloc[:,i].isnull().sum())  ## count values and add to list\n","        #print(names[i] )\n","        #print(nan_count[i])\n","    return\n","\n","def badzeros(dfx):\n","    '''\n","    function to convert NaN values to 0 and add a column that shows them as NaNs\n","    Input = dataframe of data and target column to replace NaNs with zeros\n","    Output = numpy matrix of data concatenated with binary filters and dataframe of\n","    features and first occurance of NaN and outlier.\n","    ''' \n","    ###### call other local functions to replace censored data and \n","    ###### check for NaNs and outliers\n","    #dfx = countcensor(dfx)\n","    checknans(dfx)\n","    checkoutliers(dfx)\n","    \n","    names = list(dfx)\n","    \n","    np_nan = np.matrix(dfx)  #convert dataframe to matrix\n","    \n","    np_clean =  np.nan_to_num(np_nan) #convert NaNs to 0's\n","    \n","    np_row,np_col = np.shape(np_nan)\n","    \n","#     np_z1 = np.zeros((np_row,np_col))  #make a binary filter for where NaNs were\n","#     np_z1 = (np_clean == 0.) + 0.\n","    \n","#     np_z2 = np.zeros((np_row,np_col)) #make a binary filter for possible outliers\n","#     np_z2 = (np_clean > np_clean.mean(axis=1)*5) + 0.\n","    np_ready = np_clean #np.concatenate((np_clean, np_z1, np_z2), axis=1)  #merge matrices together\n","    \n","#     a = []\n","    \n","#     for i in range(np_col):\n","      \n","#         arnan = np_ready[:,i+np_col]\n","#         arout = np_ready[:,i+(2*np_col)]\n","        \n","#         tnan = np.nonzero(arnan == 1.)\n","        \n","#         if arnan.sum()>0.: # sum of not Nan is greater than zero \n","#             tnan_first = tnan[0][0]\n","#         else:\n","#             tnan_first = np_row\n","        \n","#         tout = np.nonzero(arout == 1.)\n","        \n","#         if arout.sum()>0.:\n","#             tout_first = tout[0][0]\n","#         else:\n","#             tout_first = np_row   \n","        \n","#         a.append(names[i])\n","#         a.append(tnan_first)\n","#         a.append(tout_first)\n","        \n","#         col_names = [\"Name\",\"1st NaN\", \"1st Outlier\"]\n","#         dfa = pd.DataFrame(np.array(a).reshape(-1,3), columns = col_names)\n","    \n","    return np_ready #, dfa\n","  \n","#   # convert an array of values into a dataset matrix\n","# def TensorForm(data, look_back):\n","#     #determine number of data samples\n","#     print(np.shape(data))\n","#     rows_data,cols_data = np.shape(data)\n","    \n","#     #determine # of batches based on look-back size\n","#     tot_batches = int(rows_data-look_back)+1\n","    \n","#     #initialize 3D tensor\n","#     threeD = np.zeros(((tot_batches,look_back,cols_data)))\n","    \n","#     # populate 3D tensor\n","#     for sample_num in range(tot_batches):\n","#         for look_num in range(look_back):\n","#             threeD[sample_num,:,:] = data[sample_num:sample_num+(look_back),:]\n","    \n","#     return threeD\n","        "],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"U0WcJPi59qCm","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":535},"outputId":"fe92176d-6175-4c20-9024-7340a2c92830","executionInfo":{"status":"ok","timestamp":1565271672680,"user_tz":-120,"elapsed":42608,"user":{"displayName":"MAROUANE BENMOUSSA","photoUrl":"https://lh5.googleusercontent.com/-KY-Hy5XrhUc/AAAAAAAAAAI/AAAAAAAAAMc/cB7gRWszZHo/s64/photo.jpg","userId":"04874485933254618584"}}},"source":["last_col = np.shape(Dataset)[1]\n","\n","#np_dft, a_dft = badzeros(Dataset)\n","\n","np_dft = badzeros(Dataset)\n","\n","print(\"\\n\")\n","\n","rows_in,cols_in = np.shape(np_dft)\n","\n","print(np.shape(np_dft))\n","\n","print(\"\\n\")\n","a = list(Dataset)  #makes a list of the column names in the dataframe\n","for i in range (len(a)):    #prints a list of the column names\n","    print (i, a[i])\n","# pick column to predict\n","try:\n","    target_col = int(input(\"Select the column number to predict (default = \" + a[0] + \"): \"))\n","except ValueError:\n","    target_col = last_col   #choose last column as default\n","\n","    \n","# indicate column of distance \n","try:\n","    distance_col = int(input(\"Select the column  of elapsed time \"))\n","except ValueError:\n","    distance_col = 1    #choose last column as default\n","    \n","#choose look-ahead to predict   \n","try:\n","    lead_time =  int(input(\"How many hours ahead to predict (default = 1)? \"))\n","except ValueError:\n","    lead_time = 1\n","    \n","    \n","#convert to floating numpy arrays\n","dataset1 = np_dft.astype('float32')\n","\n","dataplot1 = dataset1[lead_time:,target_col]  #shift training data\n","\n","datatopred = dataset1[:lead_time,target_col]\n","\n","elapsed = dataset1[:, distance_col]\n","\n","# datatopredI = dataset1[:lead_time,:]\n","\n","datatopred = datatopred.reshape(-1,1)\n","\n","dataplot1 = dataplot1.reshape(-1,1)\n","\n","\n","# print(\"{} :::: {}\".format(np.shape(dataplot1),np.shape(datatopred)))\n","# normalize the dataset\n","process = 'y'\n","process = input(\"Does the data need to be pre-preprocessed Y/N?  \")\n","\n","\n","# first scales the dataset and then splits it up into Training and Testing subsets. but it was not smart to do that,  \n","# This means that information about the Testing subset  has \"leaked\" into the Training subset.\n","\n","if str(process) == 'y' or 'Y':\n","    scalerX = MinMaxScaler(feature_range=(0, 1))\n","    scalerY = MinMaxScaler(feature_range=(0, 1))\n","    dataset = scalerX.fit_transform(dataset1)\n","    dataplot = scalerY.fit_transform(dataplot1)    \n","#     elapdata = scalerX.fit_transform(elapsed)\n","       \n","    \n","    print('\\nData processed using MinMaxScaler')\n","    \n","    \n","if str(process) == 'n':\n","    print('\\nData not processed')\n","    dataset=dataset1\n","    dataplot=dataplot1\n","    \n","    \n","# split into train and test sets\n","train_size = int(len(dataset) * 0.8)\n","test_size = len(dataset) - train_size\n","\n","train, test = dataset[0:train_size, : ], dataset[train_size:len(dataset), : ]    # take all columns into the train and test\n","\n","elapX, elaptest = dataset[0:train_size, distance_col], dataset[train_size:len(dataset),  distance_col ]\n","\n","train, test = train.reshape(-1,2),test.reshape(-1,2)\n","\n","elapX = elapX.reshape(-1,1)\n","\n","elaptest = elaptest.reshape(-1,1)\n","\n","\n","print(\"{} {}\".format(np.shape(elapX),np.shape(elaptest)))\n","# prepare output arrays\n","trainY, testY = dataplot[0:train_size], dataplot[train_size:len(dataplot)]\n","\n","n,p = np.shape(trainY)\n","\n","\n","print( \" rows : {}  col : {}\".format(n, p) )\n","\n","if n < p:\n","    trainY = trainY.T\n","    testY = testY.T\n","    \n","\n","# resize input sets\n","trainX1 = train[:len(trainY),]\n","testX1 = test[:len(testY),]\n","\n","print(np.shape(trainX1))\n","\n","elaptest = elaptest[:len(testY),]\n","elapX1 = elapX[:len(trainY),]\n","\n","\n","# get number of epochs\n","try:\n","    n_epochs = int(input(\"Number of epochs? (Default = 10)? \"))\n","except ValueError:\n","    n_epochs = 4\n","\n","# prepare input Tensors\n","try:\n","    look_back = int(input(\"Number of recurrent (look-back) units? (Default = \" + str(lead_time+2) + \")? \"))\n","except ValueError:\n","    look_back = lead_time+2\n","\n","# mini-batch size    \n","n_batch = 30\n","    \n","# get final approval to compile and train\n","\n","print('\\nInput summary')\n","print('Training on ' + a[target_col])\n","print('Number of input features is ' + str(cols_in))\n","print('Prediction horizon is ' + str(lead_time))\n","print('Number of training epochs is ' + str(n_epochs))\n","print('Number of recurrent units is ' + str(look_back))\n","print('Number of samples/batch is ' + str(n_batch))\n","\n","print()\n"],"execution_count":10,"outputs":[{"output_type":"stream","text":["\n","NaN data in each feature:\n","\n","Possible outliers in each feature:\n","\n","\n","(99988, 2)\n","\n","\n","0 signal\n","1 distance\n","Select the column number to predict (default = signal): 0\n","Select the column  of elapsed time 1\n","How many hours ahead to predict (default = 1)? 0\n","Does the data need to be pre-preprocessed Y/N?  \n","\n","Data processed using MinMaxScaler\n","(79990, 1) (19998, 1)\n"," rows : 79990  col : 1\n","(79990, 2)\n","Number of epochs? (Default = 10)? 20\n","Number of recurrent (look-back) units? (Default = 2)? 10\n","\n","Input summary\n","Training on signal\n","Number of input features is 2\n","Prediction horizon is 0\n","Number of training epochs is 20\n","Number of recurrent units is 10\n","Number of samples/batch is 30\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"P4JnNo8sRBDU","colab_type":"code","colab":{}},"source":[" # convert an array of values into a dataset matrix\n","def TensorForm(data, look_back):\n","    #determine number of data samples\n","    #print(np.shape(data))\n","    rows_data,cols_data = np.shape(data)\n","    \n","    #determine # of batches based on look-back size\n","    tot_batches = int(rows_data-look_back)+1\n","    \n","    #initialize 3D tensor\n","    threeD = np.zeros(((tot_batches,look_back,cols_data)))\n","    \n","    # populate 3D tensor\n","    for sample_num in range(tot_batches):\n","        for look_num in range(look_back):\n","            threeD[sample_num,:,:] = data[sample_num:sample_num+(look_back),:]\n","    \n","    return threeD\n","\n","  \n","#   3571\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Lf1DnHwIRMoU","colab_type":"code","colab":{}},"source":["### Make training/testing tensors       \n","trainX = TensorForm(trainX1, look_back)\n","testX = TensorForm(testX1, look_back)\n","elapX = TensorForm(elapX1,look_back)"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"Bn6pSx0H5G3g","colab_type":"code","colab":{}},"source":["# def batch_generator(batch_size, sequence_length,X,Y,elap,nb_Features,nb_target_Features):\n","#     \"\"\"\n","#     Generator function for creating random batches of training-data.\n","#     \"\"\"\n","\n","#     # Infinite loop.\n","#     while True:\n","#         # Allocate a new array for the batch of input-signals.\n","#         x_shape = (batch_size, sequence_length, 1)\n","#         x_batch = np.zeros(shape=x_shape, dtype=np.float16)\n","        \n","        \n","#         # Allocate a new array for elapsed time\n","#         elp_shape = (batch_size, sequence_length, 1)\n","#         elp_batch = np.zeros(shape=elp_shape, dtype=np.float16)\n","\n","#         # Allocate a new array for the batch of output-signals.\n","#         y_shape = (batch_size,sequence_length , 1)\n","#         y_batch = np.zeros(shape=y_shape, dtype=np.float16)\n","       \n","\n","#       # Fill the batch with random sequences of data.\n","        \n","#         data_train_batches = []* batch_size\n","#         elapsed_train_batches = []* batch_size\n","#         labels_train_batches = [] * batch_size\n","        \n","#         for i in range(batch_size):                       \n","#             # Get a random start-index.\n","#             # This points somewhere into the training-data.\n","#             for idx in range(len(X)-sequence_length):\n","#                 x_batch[i] = X[idx:idx+sequence_length]\n","#                 elp_batch[i]=elap[idx:idx+sequence_length]\n","#                 y_batch[i] = Y[idx:idx+sequence_length]\n","            \n","#             data_train_batches.append(x_batch[i])\n","#             labels_train_batches.append(y_batch[i])\n","#             elapsed_train_batches.append(elp_batch[i])\n","\n","            \n","            \n","#         return data_train_batches, labels_train_batches, elapsed_train_batches"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"id":"21xlMa7ZMmfP","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":84},"outputId":"ae937e0a-0b32-4ae4-ce2d-487409e4a77f","executionInfo":{"status":"ok","timestamp":1565271674756,"user_tz":-120,"elapsed":44663,"user":{"displayName":"MAROUANE BENMOUSSA","photoUrl":"https://lh5.googleusercontent.com/-KY-Hy5XrhUc/AAAAAAAAAAI/AAAAAAAAAMc/cB7gRWszZHo/s64/photo.jpg","userId":"04874485933254618584"}}},"source":["# x_batch, y_batch,elp_batch = batch_generator(batch_size=40, sequence_length=4, X=trainX1, Y=trainY, elap=elapX1, nb_Features=2, nb_target_Features=1)\n","print(trainX1.shape)\n","\n","print(trainX.shape)\n","print(elapX.shape)\n","print(trainY.shape)"],"execution_count":14,"outputs":[{"output_type":"stream","text":["(79990, 2)\n","(79981, 10, 2)\n","(79981, 10, 1)\n","(79990, 1)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"BCTBoSHV5UB1","colab_type":"code","colab":{}},"source":["file = '/content/drive/My Drive/Colab Notebooks'\n","\n","def training(learning_rate, training_epochs, train_dropout_prob, hidden_dim, fc_dim, key, model_path=file):\n","    tf.reset_default_graph()\n","  \n","    data_train_batches = trainX\n","\n","    elapsed_train_batches = elapX\n","    \n","    labels_train_batches = trainY\n","\n","    #hidden_ind_train = \n"," \n","    # trim target arrays to match input lengths\n","    if len(data_train_batches) < len(labels_train_batches):\n","       labels_train_batches = np.asmatrix(labels_train_batches[:len(trainX)])\n","\n","    \n","    \n","      \n","    print(\"Train data is loaded!\")\n","    \n","    input_dim = data_train_batches.shape[2]\n","    output_dim = labels_train_batches.shape[1]\n","    \n","\n","    lstm = TLSTM(input_dim, output_dim, hidden_dim, fc_dim,key)\n","\n","    cross_entropy, y_pred, y, logits, labels = lstm.get_cost_acc()\n","    optimizer = tf.train.AdamOptimizer(learning_rate=learning_rate).minimize(cross_entropy)\n","    tf.keras.optimizers\n","\n","    init = tf.global_variables_initializer()\n","    saver = tf.train.Saver()\n","\n","    \n","    with tf.Session() as sess:\n","        sess.run(init)\n","        \n","        for epoch in range(n_epochs):  #\n","            total_cost = 0\n","            #for i in range(n_batch):  \n","                  # batch_ts = np.reshape(batch_ts, [batch_ts.shape[0], batch_ts.shape[2]])\n","\n","                  #feed_dict={lstm.input: batch_xs, lstm.labels: batch_ys,lstm.keep_prob: train_dropout_prob, lstm.time: batch_ts}\n","\n","                  #batch_xs is [number of patients x sequence length x input dimensionality]\n","                \n","            batch_ts = np.reshape(elapsed_train_batches, [elapsed_train_batches.shape[0], elapsed_train_batches.shape[1]])\n","                                \n","            sess.run(optimizer,feed_dict={lstm.input: data_train_batches,\n","                                              lstm.labels: labels_train_batches,\n","                                              lstm.keep_prob:train_dropout_prob,\n","                                              lstm.time:batch_ts})\n","\n","\n","        print(\"Training is over!\")\n","        saver.save(sess,model_path)\n","\n","#             for i in range(number_train_batches):  #\n","        batch_xs, batch_ys, batch_ts = data_train_batches, labels_train_batches,elapsed_train_batches\n","\n","        batch_ts = np.reshape(elapsed_train_batches, [elapsed_train_batches.shape[0], elapsed_train_batches.shape[1]])\n","    \n","        c_train, y_pred_train, y_train, logits_train, labels_train = sess.run(lstm.get_cost_acc(), feed_dict={\n","                   lstm.input: batch_xs, lstm.labels: batch_ys,lstm.keep_prob: train_dropout_prob, lstm.time: batch_ts})\n","      \n","      \n","\n","        Y_pred = []*len(y_pred_train)\n","        Labels = [None]*len(labels_train)\n","        Logits = [None]*len(logits_train)\n","      \n","#         print(len(Y_true),y_train.shape)\n","#         print(len(Y_pred),y_pred_train.shape)\n","#         print(len(Labels),labels_train.shape)\n","#         print(len(Logits),logits_train.shape)\n","\n","            \n","#         Y_true = np.concatenate([Y_true, y_train], 0)\n","#         Y_pred = np.concatenate([Y_pred, y_pred_train], 0)\n","#         Labels = np.concatenate([Labels, labels_train], 0)\n","#         Logits = np.concatenate([Logits, logits_train], 0)\n","        \n","#         else:\n","#         Y_pred = y_pred_train\n","        Labels = labels_train\n","        Logits = logits_train\n","        \n","#         print(Y_pred)\n","        print(Labels)                       \n","        print(Logits)\n","    \n","    # plot baseline and predictions\n","   #plt.close('all')\n","        plt.figure(num=None, figsize=(20, 6), dpi=80)\n","        plt.plot(trainX1[:50,0])\n","        plt.plot(Logits[:50,0])\n","        plt.show()\n","\n","       \n","        \n","        \n","            \n","#         total_acc = accuracy_score(Y_true, Y_pred)\n","#         total_auc = roc_auc_score(Labels, Logits, average='micro')\n","#         total_auc_macro = roc_auc_score(Labels, Logits, average='macro')\n","#         print(\"Train Accuracy = {:.3f}\".format(total_acc))\n","#         print(\"Train AUC = {:.3f}\".format(total_auc))\n","#         print(\"Train AUC Macro = {:.3f}\".format(total_auc_macro))\n","\n"],"execution_count":0,"outputs":[]},{"cell_type":"code","metadata":{"colab_type":"code","id":"tSXTws_TGvmd","colab":{"base_uri":"https://localhost:8080/","height":921},"outputId":"3b0a98c4-5d2e-4e2b-85a3-9c10e803a4f5","executionInfo":{"status":"ok","timestamp":1565272099169,"user_tz":-120,"elapsed":469072,"user":{"displayName":"MAROUANE BENMOUSSA","photoUrl":"https://lh5.googleusercontent.com/-KY-Hy5XrhUc/AAAAAAAAAAI/AAAAAAAAAMc/cB7gRWszZHo/s64/photo.jpg","userId":"04874485933254618584"}}},"source":["learning_rate = 1e-3\n","training_epochs = 30\n","hidden_dim = 220\n","fc_dim = 64\n","model_path = '/content/drive/My Drive/Colab Notebooks'\n","training_mode = 1\n","dropout_prob = 1\n","\n","training(learning_rate, training_epochs, dropout_prob, hidden_dim, fc_dim, training_mode, model_path)\n","\n","# testing(path, hidden_dim, fc_dim, training_mode, model_path)"],"execution_count":16,"outputs":[{"output_type":"stream","text":["WARNING: Logging before flag parsing goes to stderr.\n","W0808 13:41:13.369742 140274362931072 deprecation_wrapper.py:119] From /content/drive/My Drive/Colab Notebooks/TLSTM.py:26: The name tf.placeholder is deprecated. Please use tf.compat.v1.placeholder instead.\n","\n","W0808 13:41:13.430999 140274362931072 deprecation_wrapper.py:119] From /content/drive/My Drive/Colab Notebooks/TLSTM.py:9: The name tf.get_variable is deprecated. Please use tf.compat.v1.get_variable instead.\n","\n"],"name":"stderr"},{"output_type":"stream","text":["Train data is loaded!\n"],"name":"stdout"},{"output_type":"stream","text":["W0808 13:41:13.629140 140274362931072 deprecation_wrapper.py:119] From /content/drive/My Drive/Colab Notebooks/TLSTM.py:177: The name tf.log is deprecated. Please use tf.math.log instead.\n","\n","W0808 13:41:13.632698 140274362931072 deprecation.py:323] From /content/drive/My Drive/Colab Notebooks/TLSTM.py:177: div (from tensorflow.python.ops.math_ops) is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Deprecated in favor of operator or tf.math.divide.\n","W0808 13:41:13.725070 140274362931072 deprecation.py:506] From /content/drive/My Drive/Colab Notebooks/TLSTM.py:148: calling dropout (from tensorflow.python.ops.nn_ops) with keep_prob is deprecated and will be removed in a future version.\n","Instructions for updating:\n","Please use `rate` instead of `keep_prob`. Rate should be set to `rate = 1 - keep_prob`.\n"],"name":"stderr"},{"output_type":"stream","text":["Training is over!\n","[[0.]\n"," [1.]\n"," [0.]\n"," ...\n"," [1.]\n"," [0.]\n"," [1.]]\n","[[0.6295073 ]\n"," [0.67115283]\n"," [0.6295073 ]\n"," ...\n"," [0.67115283]\n"," [0.6295073 ]\n"," [0.67115295]]\n"],"name":"stdout"},{"output_type":"display_data","data":{"image/png":"iVBORw0KGgoAAAANSUhEUgAABQUAAAGPCAYAAADlZLatAAAABHNCSVQICAgIfAhkiAAAAAlwSFlz\nAAAMTQAADE0B0s6tTgAAADl0RVh0U29mdHdhcmUAbWF0cGxvdGxpYiB2ZXJzaW9uIDMuMC4zLCBo\ndHRwOi8vbWF0cGxvdGxpYi5vcmcvnQurowAAIABJREFUeJzsvXm8JEd1Jvpl5VJL971V3dp3hCQW\ngwDbgNDCKjaBDc/P8+bN2B6P5xmDGc/YRpYAgcwmVrHJrAJsFtvjBbNZCJDEKglJgAEhEAIJsUsg\noW6p8i6ZVbm+P6KylnuzsjKyum6cUx3f7+ef0e3q7q+jIr445zsnIow0TaGhoaGhoaGhoaGhoaGh\noaGhoaFx8KCmmoCGhoaGhoaGhoaGhoaGhoaGhobGzkKbghoaGhoaGhoaGhoaGhoaGhoaGgcZtCmo\noaGhoaGhoaGhoaGhoaGhoaFxkEGbghoaGhoaGhoaGhoaGhoaGhoaGgcZtCmooaGhoaGhoaGhoaGh\noaGhoaFxkEGbghoaGhoaGhoaGhoaGhoaGhoaGgcZtCmooaGhoaGhoaGhoaGhoaGhoaFxkEGbghoa\nGhoaGhoaGhoaGhoaGhoaGgcZtCmooaGhoaGhoaGhoaGhoaGhoaFxkEGbghoaGhoaGhoaGhoaGhoa\nGhoaGgcZLNUEMtTr9fSwww5TTUNDQ0NDQ0NDQ0NDQ0NDQ0NDQ4Ml7rzzziBN03qZz5IxBQ877DDc\ncccdqmloaGhoaGhoaGhoaGhoaGhoaGiwhGEY95T9rD4+rKGhoaGhoaGhoaGhoaGhoaGhcZBBm4Ia\nGhoaGhoaGhoaGhoaGhoaGhoHGbQpqKGhoaGhoaGhoaGhoaGhoaGhcZBBm4IaGhoaGhoaGhoaGhoa\nGhoaGhoHGbQpqKGhoaGhoaGhoaGhoaGhoaGhcZBBm4IaGhoaGhoaGhoaGhoaGhoaGhoHGbQpqKGh\noaGhoaGhoaGhoaGhoaGhcZBBm4IaGhoaGhoaGhoaGhoaGhoaGhoHGbQpqKGhoaGhoaGhoaGhoaGh\noaGhcZBBm4IaGhoaGhoaGhoaGhoaGhoaGhoHGbQpqKGhoaGhoaGhoaGhoaGhoaGhcZChlCloGMbb\nDMP4iWEYqWEYjyj43B8bhvEDwzB+aBjG+wzDsA8cVQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDY0DgbKdgh8B\n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\nYII=\n","text/plain":["<Figure size 1600x480 with 1 Axes>"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"XIkcM6tHXMJo","colab_type":"code","colab":{}},"source":[""],"execution_count":0,"outputs":[]}]}